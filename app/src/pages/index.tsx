import Head from "next/head";
import React, { useRef, FormEvent, useState, useEffect } from "react";
import {
  Title,
  Container,
  Flex,
  Button,
  Select,
  FileInput,
  createStyles,
} from "@mantine/core";

export default function Home() {
  const [jobId, setJobId] = useState<string>();
  const [status, setStatus] = useState<string>();
  const [progress, setProgress] = useState<number>();

  const [file, setFile] = useState<File | null>(null);
  const [model, setModel] = useState<string | null>("speech");

  const handleFormSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!file) {
      // user hasn't picked a file yet
      console.warn("no file selected");
      return;
    }

    var data = new FormData();
    data.append("file", file);
    //data.append("dryRun", "true");
    model && data.append("model", model);

    setStatus("uploading");

    try {
      const res = await fetch("/api/upload", {
        method: "POST",
        body: data,
      });

      const parsed = await res.json();

      if (res.status === 200) {
        setJobId(parsed.id);
      } else {
        throw new Error(parsed.error);
      }
    } catch (e) {
      console.error(e);
      setStatus("error");
    }
  };

  useEffect(() => {
    if (!jobId) return;
    checkForUpdates();
    const interval = setInterval(() => {
      checkForUpdates(interval);
    }, 1000);
    return () => {
      clearInterval(interval);
      setStatus(undefined);
    };
  }, [jobId]);

  const checkForUpdates = (interval?: NodeJS.Timer) => {
    return fetch(`/api/status?id=${jobId}`)
      .then((res) => res.json())
      .then((res) => {
        setStatus(res.status);
        if (res.progress) setProgress(res.progress);
        if (res.status === "done") {
          clearInterval(interval);
          setProgress(undefined);
        }
      })
      .catch((err) => {
        console.error(err);
        setStatus("error");
        clearInterval(interval);
      });
  };

  return (
    <>
      <Head>
        <title>Video thing</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Title my="md">video background reduction service thing</Title>

        <form onSubmit={handleFormSubmit}>
          <Flex direction="column" gap="md">
            <FileInput
              label="Your video to process please:"
              value={file}
              onChange={setFile}
              accept="video/mp4, video/quicktime"
              placeholder="Pick file"
            />
            <Select
              label="The model to use"
              placeholder="Pick one"
              value={model}
              onChange={setModel}
              data={[
                { value: "speech", label: "Optimise for speech" },
                { value: "voice", label: "Optimise for voice" },
                { value: "generic", label: "Generic" },
              ]}
            />
            <Button
              type="submit"
              disabled={!!(status && !["done", "error"].includes(status))}
            >
              Upload
            </Button>
            {status && (
              <p>
                {status} {progress ? progress + "%" : null}
              </p>
            )}
            {status === "done" && (
              <a href={`/api/download?id=${jobId}`}>download video!</a>
            )}
          </Flex>
        </form>
      </Container>
    </>
  );
}
